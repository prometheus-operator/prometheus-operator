apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "grafana.fullname" . }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "grafana.server.fullname" . }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
      {{- range $key, $value := .Values.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
      labels:
        app: {{ template "grafana.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: grafana
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "{{ .Values.auth.anonymous.enabled }}"
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "grafana.server.fullname" . }}
              key: user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "grafana.server.fullname" . }}
              key: password
{{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 8 }}
{{- end }}
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-provisioner
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /grafana-dashboard-definitions/0/default-dashboards
    {{- range .Values.serverDashboardConfigmaps }}
        - name: {{ . }}
          mountPath: /grafana-dashboard-definitions/0/{{ . }}
    {{- end }}
      {{- if .Values.mountGrafanaConfig }}
        - name: grafana-config
          mountPath: /etc/grafana
      {{- end }}
        ports:
        - name: web
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          periodSeconds: 1
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 10
        {{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
    {{ toYaml .Values.nodeSelector | indent 4 }}
    {{- end }}
    {{- if .Values.global.rbacEnable }}
      serviceAccountName: {{ template "grafana.server.fullname" . }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{- end }}
      volumes:
        - name: grafana-storage
          {{- if .Values.storageSpec }}
          persistentVolumeClaim:
            claimName: {{ template "grafana.server.fullname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: grafana-datasources
          configMap:
            name: {{ template "grafana.server.fullname" . }}-datasources
        - name: grafana-dashboard-provisioner
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dashboard-provisioner
        - name: grafana-dashboards
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dashboards
      {{- if .Values.mountGrafanaConfig }}
        - name: grafana-config
          hostPath:
            path: /etc/grafana
            type: Directory
      {{- end }}
      {{- range .Values.serverDashboardConfigmaps }}
        - name: {{ . }}
          configMap:
            name: {{ . }}
      {{- end }}

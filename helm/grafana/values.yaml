nodeSelector: {}

## Tolerations for use with node taints
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: {}
  #  - key: "key"
  #    operator: "Equal"
  #    value: "value"
  #    effect: "NoSchedule"

annotations: {}

## If true, create a serviceMonitor for grafana
##
selfServiceMonitor: true
## Custom Labels to be added to ServiceMonitor
##
additionalServiceMonitorLabels: {}

## If true, create & use RBAC resources resp. Pod Security Policies
##
global:
  rbacEnable: true
  pspEnable: true
  
  # Reference to one or more secrets to be used when pulling images
  imagePullSecrets: []
  #  - name: "image-pull-secret"

## Pass extra environment variables to the Grafana container.
##
# extraVars:
# - name: EXTRA_VAR_1
#   value: extra-var-value-1
# - name: EXTRA_VAR_2
#   value: extra-var-value-2
extraVars:

## Change to true override Grafana's default config.
## Make sure grafana.ini is present on /etc/grafana
mountGrafanaConfig: false

adminUser: "admin"
adminPassword: "admin"

service:

  ## Annotations to be added to the Service
  ##
  annotations: {}

  ## Cluster-internal IP address for Alertmanager Service
  ##
  clusterIP: ""

  ## List of external IP addresses at which the Alertmanager Service will be available
  ##
  externalIPs: []

  ## Labels to be added to the Service
  ##
  labels: {}

  ## External IP address to assign to Alertmanager Service
  ## Only used if service.type is 'LoadBalancer' and supported by cloud provider
  ##
  loadBalancerIP: ""

  ## List of client IPs allowed to access Alertmanager Service
  ## Only used if service.type is 'LoadBalancer' and supported by cloud provider
  ##
  loadBalancerSourceRanges: []

  ## Port to expose on each node
  ## Only used if service.type is 'NodePort'
  ##
  nodePort: 30902

  ## Service type
  ##
  type: ClusterIP

## Grafana Docker image
##
image:
  repository: grafana/grafana
  tag: 5.0.0

grafanaWatcher:
  repository: quay.io/coreos/grafana-watcher
  tag: v0.0.8

  ## Resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}
    #requests:
    #  memory: "16Mi"
    #  cpu: "50m"
    #limits:
    #  memory: "32Mi"
    #  cpu: "100m"

storageSpec: {}
#   class: default
#   accessMode:
#   resources:
#     requests:
#       storage: 2Gi
#   selector: {}

## Resource limits & requests
## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
resources: {}
  # limits:
  #   memory: 200Mi
  #   cpu: 200m
  # requests:
  #   memory: 100Mi
  #   cpu: 100m

ingress:
  ## If true, Grafana Ingress will be created
  ##
  enabled: false

  ## Annotations for Alertmanager Ingress
  ##
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  ## Labels to be added to the Ingress
  ##
  labels: {}
  
  ## Hostnames.
  ## Must be provided if Ingress is enabled.
  ##
  # hosts:
  #   - grafana.domain.com
  hosts: []

  ## TLS configuration for Alertmanager Ingress
  ## Secret must be manually created in the namespace
  ##
  tls: []
    # - secretName: alertmanager-general-tls
    #   hosts:
    #     - alertmanager.example.com



# Set datasource in beginning
dataSource: {}

## A list of additional configmaps that contain -dashboard.json and/or -datasource.json files
## that should be imported into grafana.
serverDashboardConfigmaps: []

serverDashboardFiles: {}

## Keep the Dashboards that are defined in this HELM chart
keepOriginalDashboards: true

## Keep the Datasources that are defined in this HELM chart
keepOriginalDatasources: true

auth:
  anonymous:
    enabled: "true"

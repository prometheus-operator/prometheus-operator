// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
)

// NerveSDConfigApplyConfiguration represents a declarative configuration of the NerveSDConfig type for use
// with apply.
type NerveSDConfigApplyConfiguration struct {
	Servers []string     `json:"servers,omitempty"`
	Paths   []string     `json:"paths,omitempty"`
	Timeout *v1.Duration `json:"timeout,omitempty"`
}

// NerveSDConfigApplyConfiguration constructs a declarative configuration of the NerveSDConfig type for use with
// apply.
func NerveSDConfig() *NerveSDConfigApplyConfiguration {
	return &NerveSDConfigApplyConfiguration{}
}

// WithServers adds the given value to the Servers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Servers field.
func (b *NerveSDConfigApplyConfiguration) WithServers(values ...string) *NerveSDConfigApplyConfiguration {
	for i := range values {
		b.Servers = append(b.Servers, values[i])
	}
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *NerveSDConfigApplyConfiguration) WithPaths(values ...string) *NerveSDConfigApplyConfiguration {
	for i := range values {
		b.Paths = append(b.Paths, values[i])
	}
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *NerveSDConfigApplyConfiguration) WithTimeout(value v1.Duration) *NerveSDConfigApplyConfiguration {
	b.Timeout = &value
	return b
}

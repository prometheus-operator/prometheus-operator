// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SilenceSpecApplyConfiguration represents a declarative configuration of the SilenceSpec type for use
// with apply.
type SilenceSpecApplyConfiguration struct {
	Comment   *string                            `json:"comment,omitempty"`
	ExpiresAt *v1.Time                           `json:"expiresAt,omitempty"`
	Matchers  []SilenceMatcherApplyConfiguration `json:"matchers,omitempty"`
}

// SilenceSpecApplyConfiguration constructs a declarative configuration of the SilenceSpec type for use with
// apply.
func SilenceSpec() *SilenceSpecApplyConfiguration {
	return &SilenceSpecApplyConfiguration{}
}

// WithComment sets the Comment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Comment field is set to the value of the last call.
func (b *SilenceSpecApplyConfiguration) WithComment(value string) *SilenceSpecApplyConfiguration {
	b.Comment = &value
	return b
}

// WithExpiresAt sets the ExpiresAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpiresAt field is set to the value of the last call.
func (b *SilenceSpecApplyConfiguration) WithExpiresAt(value v1.Time) *SilenceSpecApplyConfiguration {
	b.ExpiresAt = &value
	return b
}

// WithMatchers adds the given value to the Matchers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Matchers field.
func (b *SilenceSpecApplyConfiguration) WithMatchers(values ...*SilenceMatcherApplyConfiguration) *SilenceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchers")
		}
		b.Matchers = append(b.Matchers, *values[i])
	}
	return b
}

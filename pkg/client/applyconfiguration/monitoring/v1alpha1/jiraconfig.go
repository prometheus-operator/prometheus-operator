// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
)

// JiraConfigApplyConfiguration represents a declarative configuration of the JiraConfig type for use
// with apply.
type JiraConfigApplyConfiguration struct {
	SendResolved      *bool                         `json:"sendResolved,omitempty"`
	APIURL            *string                       `json:"apiURL,omitempty"`
	Project           *string                       `json:"project,omitempty"`
	Summary           *string                       `json:"summary,omitempty"`
	Description       *string                       `json:"description,omitempty"`
	Labels            []string                      `json:"labels,omitempty"`
	Priority          *string                       `json:"priority,omitempty"`
	IssueType         *string                       `json:"issueType,omitempty"`
	ResolveTransition *string                       `json:"resolveTransition,omitempty"`
	ReopenTransition  *string                       `json:"reopenTransition,omitempty"`
	WontFixResolution *string                       `json:"wontFixResolution,omitempty"`
	ReopenDuration    *v1.Duration                  `json:"reopenDuration,omitempty"`
	Fields            []JiraFieldApplyConfiguration `json:"fields,omitempty"`
	HTTPConfig        *HTTPConfigApplyConfiguration `json:"httpConfig,omitempty"`
}

// JiraConfigApplyConfiguration constructs a declarative configuration of the JiraConfig type for use with
// apply.
func JiraConfig() *JiraConfigApplyConfiguration {
	return &JiraConfigApplyConfiguration{}
}

// WithSendResolved sets the SendResolved field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SendResolved field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithSendResolved(value bool) *JiraConfigApplyConfiguration {
	b.SendResolved = &value
	return b
}

// WithAPIURL sets the APIURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIURL field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithAPIURL(value string) *JiraConfigApplyConfiguration {
	b.APIURL = &value
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithProject(value string) *JiraConfigApplyConfiguration {
	b.Project = &value
	return b
}

// WithSummary sets the Summary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Summary field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithSummary(value string) *JiraConfigApplyConfiguration {
	b.Summary = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithDescription(value string) *JiraConfigApplyConfiguration {
	b.Description = &value
	return b
}

// WithLabels adds the given value to the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Labels field.
func (b *JiraConfigApplyConfiguration) WithLabels(values ...string) *JiraConfigApplyConfiguration {
	for i := range values {
		b.Labels = append(b.Labels, values[i])
	}
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithPriority(value string) *JiraConfigApplyConfiguration {
	b.Priority = &value
	return b
}

// WithIssueType sets the IssueType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssueType field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithIssueType(value string) *JiraConfigApplyConfiguration {
	b.IssueType = &value
	return b
}

// WithResolveTransition sets the ResolveTransition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResolveTransition field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithResolveTransition(value string) *JiraConfigApplyConfiguration {
	b.ResolveTransition = &value
	return b
}

// WithReopenTransition sets the ReopenTransition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReopenTransition field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithReopenTransition(value string) *JiraConfigApplyConfiguration {
	b.ReopenTransition = &value
	return b
}

// WithWontFixResolution sets the WontFixResolution field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WontFixResolution field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithWontFixResolution(value string) *JiraConfigApplyConfiguration {
	b.WontFixResolution = &value
	return b
}

// WithReopenDuration sets the ReopenDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReopenDuration field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithReopenDuration(value v1.Duration) *JiraConfigApplyConfiguration {
	b.ReopenDuration = &value
	return b
}

// WithFields adds the given value to the Fields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Fields field.
func (b *JiraConfigApplyConfiguration) WithFields(values ...*JiraFieldApplyConfiguration) *JiraConfigApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFields")
		}
		b.Fields = append(b.Fields, *values[i])
	}
	return b
}

// WithHTTPConfig sets the HTTPConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTPConfig field is set to the value of the last call.
func (b *JiraConfigApplyConfiguration) WithHTTPConfig(value *HTTPConfigApplyConfiguration) *JiraConfigApplyConfiguration {
	b.HTTPConfig = value
	return b
}

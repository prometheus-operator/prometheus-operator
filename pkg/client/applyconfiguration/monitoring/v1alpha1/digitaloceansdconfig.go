// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/client/applyconfiguration/monitoring/v1"
)

// DigitalOceanSDConfigApplyConfiguration represents an declarative configuration of the DigitalOceanSDConfig type for use
// with apply.
type DigitalOceanSDConfigApplyConfiguration struct {
	Authorization                 *v1.SafeAuthorizationApplyConfiguration `json:"authorization,omitempty"`
	OAuth2                        *v1.OAuth2ApplyConfiguration            `json:"oauth2,omitempty"`
	ProxyConfigApplyConfiguration `json:",inline"`
	FollowRedirects               *bool                               `json:"followRedirects,omitempty"`
	EnableHTTP2                   *bool                               `json:"enableHTTP2,omitempty"`
	TLSConfig                     *v1.SafeTLSConfigApplyConfiguration `json:"tlsConfig,omitempty"`
	Port                          *int                                `json:"port,omitempty"`
	RefreshInterval               *monitoringv1.Duration              `json:"refreshInterval,omitempty"`
}

// DigitalOceanSDConfigApplyConfiguration constructs an declarative configuration of the DigitalOceanSDConfig type for use with
// apply.
func DigitalOceanSDConfig() *DigitalOceanSDConfigApplyConfiguration {
	return &DigitalOceanSDConfigApplyConfiguration{}
}

// WithAuthorization sets the Authorization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authorization field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithAuthorization(value *v1.SafeAuthorizationApplyConfiguration) *DigitalOceanSDConfigApplyConfiguration {
	b.Authorization = value
	return b
}

// WithOAuth2 sets the OAuth2 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OAuth2 field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithOAuth2(value *v1.OAuth2ApplyConfiguration) *DigitalOceanSDConfigApplyConfiguration {
	b.OAuth2 = value
	return b
}

// WithFollowRedirects sets the FollowRedirects field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FollowRedirects field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithFollowRedirects(value bool) *DigitalOceanSDConfigApplyConfiguration {
	b.FollowRedirects = &value
	return b
}

// WithEnableHTTP2 sets the EnableHTTP2 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableHTTP2 field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithEnableHTTP2(value bool) *DigitalOceanSDConfigApplyConfiguration {
	b.EnableHTTP2 = &value
	return b
}

// WithTLSConfig sets the TLSConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSConfig field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithTLSConfig(value *v1.SafeTLSConfigApplyConfiguration) *DigitalOceanSDConfigApplyConfiguration {
	b.TLSConfig = value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithPort(value int) *DigitalOceanSDConfigApplyConfiguration {
	b.Port = &value
	return b
}

// WithRefreshInterval sets the RefreshInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RefreshInterval field is set to the value of the last call.
func (b *DigitalOceanSDConfigApplyConfiguration) WithRefreshInterval(value monitoringv1.Duration) *DigitalOceanSDConfigApplyConfiguration {
	b.RefreshInterval = &value
	return b
}

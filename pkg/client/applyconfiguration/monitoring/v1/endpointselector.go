// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EndpointSelectorApplyConfiguration represents an declarative configuration of the EndpointSelector type for use
// with apply.
type EndpointSelectorApplyConfiguration struct {
	LabelSelector *v1.LabelSelector `json:"labelSelector,omitempty"`
	Labels        []string          `json:"labels,omitempty"`
	Fields        []string          `json:"fields,omitempty"`
}

// EndpointSelectorApplyConfiguration constructs an declarative configuration of the EndpointSelector type for use with
// apply.
func EndpointSelector() *EndpointSelectorApplyConfiguration {
	return &EndpointSelectorApplyConfiguration{}
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *EndpointSelectorApplyConfiguration) WithLabelSelector(value v1.LabelSelector) *EndpointSelectorApplyConfiguration {
	b.LabelSelector = &value
	return b
}

// WithLabels adds the given value to the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Labels field.
func (b *EndpointSelectorApplyConfiguration) WithLabels(values ...string) *EndpointSelectorApplyConfiguration {
	for i := range values {
		b.Labels = append(b.Labels, values[i])
	}
	return b
}

// WithFields adds the given value to the Fields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Fields field.
func (b *EndpointSelectorApplyConfiguration) WithFields(values ...string) *EndpointSelectorApplyConfiguration {
	for i := range values {
		b.Fields = append(b.Fields, values[i])
	}
	return b
}

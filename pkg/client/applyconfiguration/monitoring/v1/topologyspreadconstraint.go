// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	v1 "k8s.io/api/core/v1"
)

// TopologySpreadConstraintApplyConfiguration represents an declarative configuration of the TopologySpreadConstraint type for use
// with apply.
type TopologySpreadConstraintApplyConfiguration struct {
	v1.TopologySpreadConstraint `json:",inline"`
	AdditionalLabelSelectors    []monitoringv1.AdditionalLabelSelector `json:"additionalLabelSelectors,omitempty"`
}

// TopologySpreadConstraintApplyConfiguration constructs an declarative configuration of the TopologySpreadConstraint type for use with
// apply.
func TopologySpreadConstraint() *TopologySpreadConstraintApplyConfiguration {
	return &TopologySpreadConstraintApplyConfiguration{}
}

// WithAdditionalLabelSelectors adds the given value to the AdditionalLabelSelectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalLabelSelectors field.
func (b *TopologySpreadConstraintApplyConfiguration) WithAdditionalLabelSelectors(values ...monitoringv1.AdditionalLabelSelector) *TopologySpreadConstraintApplyConfiguration {
	for i := range values {
		b.AdditionalLabelSelectors = append(b.AdditionalLabelSelectors, values[i])
	}
	return b
}

// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// EmbeddedPersistentVolumeClaimTemplateApplyConfiguration represents a declarative configuration of the EmbeddedPersistentVolumeClaimTemplate type for use
// with apply.
type EmbeddedPersistentVolumeClaimTemplateApplyConfiguration struct {
	*EmbeddedObjectMetadataApplyConfiguration `json:"metadata,omitempty"`
	Spec                                      *corev1.PersistentVolumeClaimSpec `json:"spec,omitempty"`
}

// EmbeddedPersistentVolumeClaimTemplateApplyConfiguration constructs a declarative configuration of the EmbeddedPersistentVolumeClaimTemplate type for use with
// apply.
func EmbeddedPersistentVolumeClaimTemplate() *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration {
	return &EmbeddedPersistentVolumeClaimTemplateApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration) WithName(value string) *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration {
	b.ensureEmbeddedObjectMetadataApplyConfigurationExists()
	b.EmbeddedObjectMetadataApplyConfiguration.Name = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration) WithLabels(entries map[string]string) *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration {
	b.ensureEmbeddedObjectMetadataApplyConfigurationExists()
	if b.EmbeddedObjectMetadataApplyConfiguration.Labels == nil && len(entries) > 0 {
		b.EmbeddedObjectMetadataApplyConfiguration.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.EmbeddedObjectMetadataApplyConfiguration.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration) WithAnnotations(entries map[string]string) *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration {
	b.ensureEmbeddedObjectMetadataApplyConfigurationExists()
	if b.EmbeddedObjectMetadataApplyConfiguration.Annotations == nil && len(entries) > 0 {
		b.EmbeddedObjectMetadataApplyConfiguration.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.EmbeddedObjectMetadataApplyConfiguration.Annotations[k] = v
	}
	return b
}

func (b *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration) ensureEmbeddedObjectMetadataApplyConfigurationExists() {
	if b.EmbeddedObjectMetadataApplyConfiguration == nil {
		b.EmbeddedObjectMetadataApplyConfiguration = &EmbeddedObjectMetadataApplyConfiguration{}
	}
}

// WithSpec sets the Spec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Spec field is set to the value of the last call.
func (b *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration) WithSpec(value corev1.PersistentVolumeClaimSpec) *EmbeddedPersistentVolumeClaimTemplateApplyConfiguration {
	b.Spec = &value
	return b
}

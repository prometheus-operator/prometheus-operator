// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// EmbeddedVolumeSourceApplyConfiguration represents a declarative configuration of the EmbeddedVolumeSource type for use
// with apply.
type EmbeddedVolumeSourceApplyConfiguration struct {
	HostPath              *corev1.HostPathVolumeSource                     `json:"hostPath,omitempty"`
	EmptyDir              *corev1.EmptyDirVolumeSource                     `json:"emptyDir,omitempty"`
	GCEPersistentDisk     *corev1.GCEPersistentDiskVolumeSource            `json:"gcePersistentDisk,omitempty"`
	AWSElasticBlockStore  *corev1.AWSElasticBlockStoreVolumeSource         `json:"awsElasticBlockStore,omitempty"`
	GitRepo               *corev1.GitRepoVolumeSource                      `json:"gitRepo,omitempty"`
	Secret                *corev1.SecretVolumeSource                       `json:"secret,omitempty"`
	NFS                   *corev1.NFSVolumeSource                          `json:"nfs,omitempty"`
	ISCSI                 *corev1.ISCSIVolumeSource                        `json:"iscsi,omitempty"`
	Glusterfs             *corev1.GlusterfsVolumeSource                    `json:"glusterfs,omitempty"`
	PersistentVolumeClaim *corev1.PersistentVolumeClaimVolumeSource        `json:"persistentVolumeClaim,omitempty"`
	RBD                   *corev1.RBDVolumeSource                          `json:"rbd,omitempty"`
	FlexVolume            *corev1.FlexVolumeSource                         `json:"flexVolume,omitempty"`
	Cinder                *corev1.CinderVolumeSource                       `json:"cinder,omitempty"`
	CephFS                *corev1.CephFSVolumeSource                       `json:"cephfs,omitempty"`
	Flocker               *corev1.FlockerVolumeSource                      `json:"flocker,omitempty"`
	DownwardAPI           *corev1.DownwardAPIVolumeSource                  `json:"downwardAPI,omitempty"`
	FC                    *corev1.FCVolumeSource                           `json:"fc,omitempty"`
	AzureFile             *corev1.AzureFileVolumeSource                    `json:"azureFile,omitempty"`
	ConfigMap             *corev1.ConfigMapVolumeSource                    `json:"configMap,omitempty"`
	VsphereVolume         *corev1.VsphereVirtualDiskVolumeSource           `json:"vsphereVolume,omitempty"`
	Quobyte               *corev1.QuobyteVolumeSource                      `json:"quobyte,omitempty"`
	AzureDisk             *corev1.AzureDiskVolumeSource                    `json:"azureDisk,omitempty"`
	PhotonPersistentDisk  *corev1.PhotonPersistentDiskVolumeSource         `json:"photonPersistentDisk,omitempty"`
	Projected             *corev1.ProjectedVolumeSource                    `json:"projected,omitempty"`
	PortworxVolume        *corev1.PortworxVolumeSource                     `json:"portworxVolume,omitempty"`
	ScaleIO               *corev1.ScaleIOVolumeSource                      `json:"scaleIO,omitempty"`
	StorageOS             *corev1.StorageOSVolumeSource                    `json:"storageos,omitempty"`
	CSI                   *corev1.CSIVolumeSource                          `json:"csi,omitempty"`
	Ephemeral             *EmbeddedEphemeralVolumeSourceApplyConfiguration `json:"ephemeral,omitempty"`
	Image                 *corev1.ImageVolumeSource                        `json:"image,omitempty"`
}

// EmbeddedVolumeSourceApplyConfiguration constructs a declarative configuration of the EmbeddedVolumeSource type for use with
// apply.
func EmbeddedVolumeSource() *EmbeddedVolumeSourceApplyConfiguration {
	return &EmbeddedVolumeSourceApplyConfiguration{}
}

// WithHostPath sets the HostPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostPath field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithHostPath(value corev1.HostPathVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.HostPath = &value
	return b
}

// WithEmptyDir sets the EmptyDir field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EmptyDir field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithEmptyDir(value corev1.EmptyDirVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.EmptyDir = &value
	return b
}

// WithGCEPersistentDisk sets the GCEPersistentDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GCEPersistentDisk field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithGCEPersistentDisk(value corev1.GCEPersistentDiskVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.GCEPersistentDisk = &value
	return b
}

// WithAWSElasticBlockStore sets the AWSElasticBlockStore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AWSElasticBlockStore field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithAWSElasticBlockStore(value corev1.AWSElasticBlockStoreVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.AWSElasticBlockStore = &value
	return b
}

// WithGitRepo sets the GitRepo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GitRepo field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithGitRepo(value corev1.GitRepoVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.GitRepo = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithSecret(value corev1.SecretVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Secret = &value
	return b
}

// WithNFS sets the NFS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NFS field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithNFS(value corev1.NFSVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.NFS = &value
	return b
}

// WithISCSI sets the ISCSI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ISCSI field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithISCSI(value corev1.ISCSIVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.ISCSI = &value
	return b
}

// WithGlusterfs sets the Glusterfs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Glusterfs field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithGlusterfs(value corev1.GlusterfsVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Glusterfs = &value
	return b
}

// WithPersistentVolumeClaim sets the PersistentVolumeClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PersistentVolumeClaim field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithPersistentVolumeClaim(value corev1.PersistentVolumeClaimVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.PersistentVolumeClaim = &value
	return b
}

// WithRBD sets the RBD field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RBD field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithRBD(value corev1.RBDVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.RBD = &value
	return b
}

// WithFlexVolume sets the FlexVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FlexVolume field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithFlexVolume(value corev1.FlexVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.FlexVolume = &value
	return b
}

// WithCinder sets the Cinder field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cinder field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithCinder(value corev1.CinderVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Cinder = &value
	return b
}

// WithCephFS sets the CephFS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CephFS field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithCephFS(value corev1.CephFSVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.CephFS = &value
	return b
}

// WithFlocker sets the Flocker field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Flocker field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithFlocker(value corev1.FlockerVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Flocker = &value
	return b
}

// WithDownwardAPI sets the DownwardAPI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DownwardAPI field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithDownwardAPI(value corev1.DownwardAPIVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.DownwardAPI = &value
	return b
}

// WithFC sets the FC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FC field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithFC(value corev1.FCVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.FC = &value
	return b
}

// WithAzureFile sets the AzureFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AzureFile field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithAzureFile(value corev1.AzureFileVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.AzureFile = &value
	return b
}

// WithConfigMap sets the ConfigMap field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMap field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithConfigMap(value corev1.ConfigMapVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.ConfigMap = &value
	return b
}

// WithVsphereVolume sets the VsphereVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VsphereVolume field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithVsphereVolume(value corev1.VsphereVirtualDiskVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.VsphereVolume = &value
	return b
}

// WithQuobyte sets the Quobyte field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Quobyte field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithQuobyte(value corev1.QuobyteVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Quobyte = &value
	return b
}

// WithAzureDisk sets the AzureDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AzureDisk field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithAzureDisk(value corev1.AzureDiskVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.AzureDisk = &value
	return b
}

// WithPhotonPersistentDisk sets the PhotonPersistentDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhotonPersistentDisk field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithPhotonPersistentDisk(value corev1.PhotonPersistentDiskVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.PhotonPersistentDisk = &value
	return b
}

// WithProjected sets the Projected field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Projected field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithProjected(value corev1.ProjectedVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Projected = &value
	return b
}

// WithPortworxVolume sets the PortworxVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortworxVolume field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithPortworxVolume(value corev1.PortworxVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.PortworxVolume = &value
	return b
}

// WithScaleIO sets the ScaleIO field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScaleIO field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithScaleIO(value corev1.ScaleIOVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.ScaleIO = &value
	return b
}

// WithStorageOS sets the StorageOS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageOS field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithStorageOS(value corev1.StorageOSVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.StorageOS = &value
	return b
}

// WithCSI sets the CSI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSI field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithCSI(value corev1.CSIVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.CSI = &value
	return b
}

// WithEphemeral sets the Ephemeral field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ephemeral field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithEphemeral(value *EmbeddedEphemeralVolumeSourceApplyConfiguration) *EmbeddedVolumeSourceApplyConfiguration {
	b.Ephemeral = value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *EmbeddedVolumeSourceApplyConfiguration) WithImage(value corev1.ImageVolumeSource) *EmbeddedVolumeSourceApplyConfiguration {
	b.Image = &value
	return b
}

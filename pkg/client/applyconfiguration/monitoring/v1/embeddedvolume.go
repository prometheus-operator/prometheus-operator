// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// EmbeddedVolumeApplyConfiguration represents a declarative configuration of the EmbeddedVolume type for use
// with apply.
type EmbeddedVolumeApplyConfiguration struct {
	Name                                   *string `json:"name,omitempty"`
	EmbeddedVolumeSourceApplyConfiguration `json:",inline"`
}

// EmbeddedVolumeApplyConfiguration constructs a declarative configuration of the EmbeddedVolume type for use with
// apply.
func EmbeddedVolume() *EmbeddedVolumeApplyConfiguration {
	return &EmbeddedVolumeApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithName(value string) *EmbeddedVolumeApplyConfiguration {
	b.Name = &value
	return b
}

// WithHostPath sets the HostPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostPath field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithHostPath(value corev1.HostPathVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.HostPath = &value
	return b
}

// WithEmptyDir sets the EmptyDir field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EmptyDir field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithEmptyDir(value corev1.EmptyDirVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.EmptyDir = &value
	return b
}

// WithGCEPersistentDisk sets the GCEPersistentDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GCEPersistentDisk field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithGCEPersistentDisk(value corev1.GCEPersistentDiskVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.GCEPersistentDisk = &value
	return b
}

// WithAWSElasticBlockStore sets the AWSElasticBlockStore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AWSElasticBlockStore field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithAWSElasticBlockStore(value corev1.AWSElasticBlockStoreVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.AWSElasticBlockStore = &value
	return b
}

// WithGitRepo sets the GitRepo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GitRepo field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithGitRepo(value corev1.GitRepoVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.GitRepo = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithSecret(value corev1.SecretVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Secret = &value
	return b
}

// WithNFS sets the NFS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NFS field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithNFS(value corev1.NFSVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.NFS = &value
	return b
}

// WithISCSI sets the ISCSI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ISCSI field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithISCSI(value corev1.ISCSIVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.ISCSI = &value
	return b
}

// WithGlusterfs sets the Glusterfs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Glusterfs field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithGlusterfs(value corev1.GlusterfsVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Glusterfs = &value
	return b
}

// WithPersistentVolumeClaim sets the PersistentVolumeClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PersistentVolumeClaim field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithPersistentVolumeClaim(value corev1.PersistentVolumeClaimVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.PersistentVolumeClaim = &value
	return b
}

// WithRBD sets the RBD field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RBD field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithRBD(value corev1.RBDVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.RBD = &value
	return b
}

// WithFlexVolume sets the FlexVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FlexVolume field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithFlexVolume(value corev1.FlexVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.FlexVolume = &value
	return b
}

// WithCinder sets the Cinder field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cinder field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithCinder(value corev1.CinderVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Cinder = &value
	return b
}

// WithCephFS sets the CephFS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CephFS field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithCephFS(value corev1.CephFSVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.CephFS = &value
	return b
}

// WithFlocker sets the Flocker field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Flocker field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithFlocker(value corev1.FlockerVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Flocker = &value
	return b
}

// WithDownwardAPI sets the DownwardAPI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DownwardAPI field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithDownwardAPI(value corev1.DownwardAPIVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.DownwardAPI = &value
	return b
}

// WithFC sets the FC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FC field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithFC(value corev1.FCVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.FC = &value
	return b
}

// WithAzureFile sets the AzureFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AzureFile field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithAzureFile(value corev1.AzureFileVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.AzureFile = &value
	return b
}

// WithConfigMap sets the ConfigMap field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMap field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithConfigMap(value corev1.ConfigMapVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.ConfigMap = &value
	return b
}

// WithVsphereVolume sets the VsphereVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VsphereVolume field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithVsphereVolume(value corev1.VsphereVirtualDiskVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.VsphereVolume = &value
	return b
}

// WithQuobyte sets the Quobyte field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Quobyte field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithQuobyte(value corev1.QuobyteVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Quobyte = &value
	return b
}

// WithAzureDisk sets the AzureDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AzureDisk field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithAzureDisk(value corev1.AzureDiskVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.AzureDisk = &value
	return b
}

// WithPhotonPersistentDisk sets the PhotonPersistentDisk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhotonPersistentDisk field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithPhotonPersistentDisk(value corev1.PhotonPersistentDiskVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.PhotonPersistentDisk = &value
	return b
}

// WithProjected sets the Projected field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Projected field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithProjected(value corev1.ProjectedVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Projected = &value
	return b
}

// WithPortworxVolume sets the PortworxVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortworxVolume field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithPortworxVolume(value corev1.PortworxVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.PortworxVolume = &value
	return b
}

// WithScaleIO sets the ScaleIO field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScaleIO field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithScaleIO(value corev1.ScaleIOVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.ScaleIO = &value
	return b
}

// WithStorageOS sets the StorageOS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageOS field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithStorageOS(value corev1.StorageOSVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.StorageOS = &value
	return b
}

// WithCSI sets the CSI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSI field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithCSI(value corev1.CSIVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.CSI = &value
	return b
}

// WithEphemeral sets the Ephemeral field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ephemeral field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithEphemeral(value *EmbeddedEphemeralVolumeSourceApplyConfiguration) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Ephemeral = value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *EmbeddedVolumeApplyConfiguration) WithImage(value corev1.ImageVolumeSource) *EmbeddedVolumeApplyConfiguration {
	b.EmbeddedVolumeSourceApplyConfiguration.Image = &value
	return b
}

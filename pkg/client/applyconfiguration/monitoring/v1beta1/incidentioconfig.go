// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	monitoringv1beta1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1beta1"
	v1 "k8s.io/api/core/v1"
)

// IncidentioConfigApplyConfiguration represents a declarative configuration of the IncidentioConfig type for use
// with apply.
type IncidentioConfigApplyConfiguration struct {
	SendResolved         *bool                         `json:"sendResolved,omitempty"`
	HTTPConfig           *HTTPConfigApplyConfiguration `json:"httpConfig,omitempty"`
	URL                  *monitoringv1beta1.URL        `json:"url,omitempty"`
	URLFile              *string                       `json:"urlFile,omitempty"`
	AlertSourceToken     *v1.SecretKeySelector         `json:"alertSourceToken,omitempty"`
	AlertSourceTokenFile *string                       `json:"alertSourceTokenFile,omitempty"`
	MaxAlerts            *int32                        `json:"maxAlerts,omitempty"`
	Timeout              *monitoringv1.Duration        `json:"timeout,omitempty"`
}

// IncidentioConfigApplyConfiguration constructs a declarative configuration of the IncidentioConfig type for use with
// apply.
func IncidentioConfig() *IncidentioConfigApplyConfiguration {
	return &IncidentioConfigApplyConfiguration{}
}

// WithSendResolved sets the SendResolved field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SendResolved field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithSendResolved(value bool) *IncidentioConfigApplyConfiguration {
	b.SendResolved = &value
	return b
}

// WithHTTPConfig sets the HTTPConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTPConfig field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithHTTPConfig(value *HTTPConfigApplyConfiguration) *IncidentioConfigApplyConfiguration {
	b.HTTPConfig = value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithURL(value monitoringv1beta1.URL) *IncidentioConfigApplyConfiguration {
	b.URL = &value
	return b
}

// WithURLFile sets the URLFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URLFile field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithURLFile(value string) *IncidentioConfigApplyConfiguration {
	b.URLFile = &value
	return b
}

// WithAlertSourceToken sets the AlertSourceToken field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AlertSourceToken field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithAlertSourceToken(value v1.SecretKeySelector) *IncidentioConfigApplyConfiguration {
	b.AlertSourceToken = &value
	return b
}

// WithAlertSourceTokenFile sets the AlertSourceTokenFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AlertSourceTokenFile field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithAlertSourceTokenFile(value string) *IncidentioConfigApplyConfiguration {
	b.AlertSourceTokenFile = &value
	return b
}

// WithMaxAlerts sets the MaxAlerts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxAlerts field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithMaxAlerts(value int32) *IncidentioConfigApplyConfiguration {
	b.MaxAlerts = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *IncidentioConfigApplyConfiguration) WithTimeout(value monitoringv1.Duration) *IncidentioConfigApplyConfiguration {
	b.Timeout = &value
	return b
}

// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1beta1"
	monitoringv1beta1 "github.com/prometheus-operator/prometheus-operator/pkg/client/applyconfiguration/monitoring/v1beta1"
	typedmonitoringv1beta1 "github.com/prometheus-operator/prometheus-operator/pkg/client/versioned/typed/monitoring/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAlertmanagerConfigs implements AlertmanagerConfigInterface
type fakeAlertmanagerConfigs struct {
	*gentype.FakeClientWithListAndApply[*v1beta1.AlertmanagerConfig, *v1beta1.AlertmanagerConfigList, *monitoringv1beta1.AlertmanagerConfigApplyConfiguration]
	Fake *FakeMonitoringV1beta1
}

func newFakeAlertmanagerConfigs(fake *FakeMonitoringV1beta1, namespace string) typedmonitoringv1beta1.AlertmanagerConfigInterface {
	return &fakeAlertmanagerConfigs{
		gentype.NewFakeClientWithListAndApply[*v1beta1.AlertmanagerConfig, *v1beta1.AlertmanagerConfigList, *monitoringv1beta1.AlertmanagerConfigApplyConfiguration](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("alertmanagerconfigs"),
			v1beta1.SchemeGroupVersion.WithKind("AlertmanagerConfig"),
			func() *v1beta1.AlertmanagerConfig { return &v1beta1.AlertmanagerConfig{} },
			func() *v1beta1.AlertmanagerConfigList { return &v1beta1.AlertmanagerConfigList{} },
			func(dst, src *v1beta1.AlertmanagerConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.AlertmanagerConfigList) []*v1beta1.AlertmanagerConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.AlertmanagerConfigList, items []*v1beta1.AlertmanagerConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

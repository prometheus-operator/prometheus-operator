// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	monitoringv1alpha1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1alpha1"
	applyconfigurationmonitoringv1alpha1 "github.com/prometheus-operator/prometheus-operator/pkg/client/applyconfiguration/monitoring/v1alpha1"
	scheme "github.com/prometheus-operator/prometheus-operator/pkg/client/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// SilencesGetter has a method to return a SilenceInterface.
// A group's client should implement this interface.
type SilencesGetter interface {
	Silences(namespace string) SilenceInterface
}

// SilenceInterface has methods to work with Silence resources.
type SilenceInterface interface {
	Create(ctx context.Context, silence *monitoringv1alpha1.Silence, opts v1.CreateOptions) (*monitoringv1alpha1.Silence, error)
	Update(ctx context.Context, silence *monitoringv1alpha1.Silence, opts v1.UpdateOptions) (*monitoringv1alpha1.Silence, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, silence *monitoringv1alpha1.Silence, opts v1.UpdateOptions) (*monitoringv1alpha1.Silence, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*monitoringv1alpha1.Silence, error)
	List(ctx context.Context, opts v1.ListOptions) (*monitoringv1alpha1.SilenceList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *monitoringv1alpha1.Silence, err error)
	Apply(ctx context.Context, silence *applyconfigurationmonitoringv1alpha1.SilenceApplyConfiguration, opts v1.ApplyOptions) (result *monitoringv1alpha1.Silence, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, silence *applyconfigurationmonitoringv1alpha1.SilenceApplyConfiguration, opts v1.ApplyOptions) (result *monitoringv1alpha1.Silence, err error)
	SilenceExpansion
}

// silences implements SilenceInterface
type silences struct {
	*gentype.ClientWithListAndApply[*monitoringv1alpha1.Silence, *monitoringv1alpha1.SilenceList, *applyconfigurationmonitoringv1alpha1.SilenceApplyConfiguration]
}

// newSilences returns a Silences
func newSilences(c *MonitoringV1alpha1Client, namespace string) *silences {
	return &silences{
		gentype.NewClientWithListAndApply[*monitoringv1alpha1.Silence, *monitoringv1alpha1.SilenceList, *applyconfigurationmonitoringv1alpha1.SilenceApplyConfiguration](
			"silences",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *monitoringv1alpha1.Silence { return &monitoringv1alpha1.Silence{} },
			func() *monitoringv1alpha1.SilenceList { return &monitoringv1alpha1.SilenceList{} },
		),
	}
}

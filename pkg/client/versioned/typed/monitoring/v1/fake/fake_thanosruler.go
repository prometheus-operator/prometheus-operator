// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/client/applyconfiguration/monitoring/v1"
	typedmonitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/client/versioned/typed/monitoring/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeThanosRulers implements ThanosRulerInterface
type fakeThanosRulers struct {
	*gentype.FakeClientWithListAndApply[*v1.ThanosRuler, *v1.ThanosRulerList, *monitoringv1.ThanosRulerApplyConfiguration]
	Fake *FakeMonitoringV1
}

func newFakeThanosRulers(fake *FakeMonitoringV1, namespace string) typedmonitoringv1.ThanosRulerInterface {
	return &fakeThanosRulers{
		gentype.NewFakeClientWithListAndApply[*v1.ThanosRuler, *v1.ThanosRulerList, *monitoringv1.ThanosRulerApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("thanosrulers"),
			v1.SchemeGroupVersion.WithKind("ThanosRuler"),
			func() *v1.ThanosRuler { return &v1.ThanosRuler{} },
			func() *v1.ThanosRulerList { return &v1.ThanosRulerList{} },
			func(dst, src *v1.ThanosRulerList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ThanosRulerList) []*v1.ThanosRuler { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ThanosRulerList, items []*v1.ThanosRuler) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
